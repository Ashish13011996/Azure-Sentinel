1. Query to find out Incident raised for the weeK:

SecurityIncident
| where TimeGenerated >= datetime(2021-04-12T12:00:00.00Z) and TimeGenerated < datetime(2021-04-19T12:00:00.00Z)
| summarize count() by Title | sort by count_

*****************************************************************************************************
2.  Query to generate specific alert how many times got triggererd:

let timeframe = ago(7d); SecurityAlert | where TimeGenerated >= timeframe | where AlertName contains "High outbound" | summarize by DisplayName, AlertName, AlertSeverity, Description, Entities

****************************************************************************************************
3. Failed SSH brute force attack:

Syslog
| where * contains "172.16.0.57" | where HostName == "azmmtweuecqci" or HostName == "azmmtweuscddb" | where SyslogMessage contains "MindtreeTestUser" | where SyslogMessage contains "172.16.0.57"

****************************************************************************************************
4. SSH - Potential Brute Force
Syslog
| where SyslogMessage contains "Failed password for invalid user"
| where ProcessName =~ "sshd"
| parse kind=relaxed SyslogMessage with * "invalid user" user " from " ip " port" port " ssh2"
| project user, ip, port, SyslogMessage, EventTime

or

Syslog
| where SyslogMessage contains "Failed password for invalid user"
| where ProcessName =~ "sshd"
| parse kind=relaxed SyslogMessage with * "invalid user" user " from " ip " port" port " ssh2"
| extend Username = user, IPAddress = ip, ["Port Number"] = port

or

Syslog
| where SyslogMessage contains "Failed password for invalid user"
| where ProcessName =~ "sshd"
| parse kind=relaxed SyslogMessage with * "invalid user" user " from " ip " port" Sourceport " ssh2"
| project user, ip, Sourceport, SyslogMessage, EventTime
| extend DestPort = "22"

**************************************************************************************************
5. Several deny actions registered

search * | where msg_s contains "10.240.56.38"
and 
msg_s contains "Deny"

*************************************************************************************************
6. User attempt to install a service
SecurityEvent
| where EventID == "4697"
| project TimeGenerated, Computer, Account, Activity, ServiceFileName, ServiceName, ServiceAccount, AccountType

**************************************************************************************************
7. Internal Reconnaissance Detected

To check destination port and destination IP list in case of Internal Recon

let timeframe = ago(1h);
AzureDiagnostics
| where TimeGenerated >= timeframe
| where OperationName in ("AzureFirewallApplicationRuleLog", "AzureFirewallNetworkRuleLog")
| extend msg_s_replaced0 = replace(@"\s\s", @" ", msg_s)
| extend msg_s_replaced1 = replace(@"\.\s", @" ", msg_s_replaced0)
| extend msg_a = split(msg_s_replaced1, " ")
| extend srcAddr_a = split(msg_a[3], ":"), destAddr_a = split(msg_a[5], ":")
| extend protocol = tostring(msg_a[0]), srcIp = tostring(srcAddr_a[0]), srcPort = tostring(srcAddr_a[1]), destIp = tostring(destAddr_a[0]), destPort = tostring(destAddr_a[1]), action = tostring(msg_a[7])
| extend url = iff(destIp matches regex "\\d+\\.\\d+\\.\\d+\\.\\d+", "", destIp)
| where action has "Deny"
| where srcIp == "10.240.52.68"
| project srcIp, destIp, destPort
| where (srcIp matches regex "(10)(\\.([2]([0-5][0-5]|[01234][6-9])|[1][0-9][0-9]|[1-9][0-9]|[0-9])){3}|(172)\\.(1[6-9]|2[0-9]|3[0-1])(\\.(2[0-4][0-9]|25[0-5]|[1][0-9][0-9]|[1-9][0-9]|[0-9])){2}|(192)\\.(168)(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){2}")

or uae this:


let timeframe = ago(1h);
AzureDiagnostics
| where TimeGenerated >= timeframe
| where OperationName in ("AzureFirewallApplicationRuleLog", "AzureFirewallNetworkRuleLog")
| extend msg_s_replaced0 = replace(@"\s\s", @" ", msg_s)
| extend msg_s_replaced1 = replace(@"\.\s", @" ", msg_s_replaced0)
| extend msg_a = split(msg_s_replaced1, " ")
| extend srcAddr_a = split(msg_a[3], ":"), destAddr_a = split(msg_a[5], ":")
| extend protocol = tostring(msg_a[0]), srcIp = tostring(srcAddr_a[0]), srcPort = tostring(srcAddr_a[1]), destIp = tostring(destAddr_a[0]), destPort = tostring(destAddr_a[1]), action = tostring(msg_a[7])
| extend url = iff(destIp matches regex "\\d+\\.\\d+\\.\\d+\\.\\d+", "", destIp)
| where action has "Deny"
| where srcIp == "10.240.52.68"
| project srcIp, destIp, destPort
| where (srcIp matches regex "(^127\\.0\\.0\\.1)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.)")
 

Note: change source ip in query as per the alert 

**********************************************************************************************
8. To check IOCs (IP address):

let timeframe = ago(30d);
AzureDiagnostics
    | where TimeGenerated >= timeframe
| where OperationName in ("AzureFirewallApplicationRuleLog","AzureFirewallNetworkRuleLog")
| extend msg_s_replaced0 = replace(@"\s\s",@" ",msg_s)
    | extend msg_s_replaced1 = replace(@"\.\s",@" ",msg_s_replaced0)
    | extend msg_a = split(msg_s_replaced1," ")
    | extend srcAddr_a = split(msg_a[3],":") , destAddr_a = split(msg_a[5],":")
    | extend protocol = tostring(msg_a[0]), srcIp = tostring(srcAddr_a[0]), srcPort = tostring(srcAddr_a[1]), destIp = tostring(destAddr_a[0]), destPort = tostring(destAddr_a[1]), action = tostring(msg_a[7])
    | extend url = iff(destIp matches regex "\\d+\\.\\d+\\.\\d+\\.\\d+","",destIp)
    | where not( destIp matches regex "(10)(\\.([2]([0-5][0-5]|[01234][6-9])|[1][0-9][0-9]|[1-9][0-9]|[0-9])){3}|(172)\\.(1[6-9]|2[0-9]|3[0-1])(\\.(2[0-4][0-9]|25[0-5]|[1][0-9][0-9]|[1-9][0-9]|[0-9])){2}|(192)\\.(168)(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){2}")
   | where srcIp in ("103.219.193.177","103.219.193.212","108.160.136.124","123.16.77.127","124.248.219.232","128.199.69.229","134.35.60.210","139.162.12.191","139.162.48.186","153.122.160.135","156.146.43.201","157.7.132.28","158.247.199.115","167.172.200.181","172.104.121.252","181.143.12.194","185.120.124.27","190.2.131.159","199.195.251.198","210.121.187.8","213.232.87.201","218.187.66.134","69.4.234.30","86.106.103.116","95.30.32.65") or destIp in ("103.219.193.177","103.219.193.212","108.160.136.124","123.16.77.127","124.248.219.232","128.199.69.229","134.35.60.210","139.162.12.191","139.162.48.186","153.122.160.135","156.146.43.201","157.7.132.28","158.247.199.115","167.172.200.181","172.104.121.252","181.143.12.194","185.120.124.27","190.2.131.159","199.195.251.198","210.121.187.8","213.232.87.201","218.187.66.134","69.4.234.30","86.106.103.116","95.30.32.65")
   | project srcIp, destIp, action

**********************************************************************************************
9.  Multiple Table search:

union SecurityEvent, SecurityAlert | where * contains "4624"

**********************************************************************************************
10. Query to call Watchlist:

let watchlist = _GetWatchlist('Whitelisted_IP');
| where IPCustomEntity in ( watchlist )

**********************************************************************************************
11. To check for logs towards a particular destination Ip and Port:

AzureDiagnostics
| extend msg_s_replaced0 = replace(@"\s\s", @" ", msg_s)
| extend msg_s_replaced1 = replace(@"\.\s", @" ", msg_s_replaced0)
| extend msg_a = split(msg_s_replaced1, " ")
| extend srcAddr_a = split(msg_a[3], ":"), destAddr_a = split(msg_a[5], ":")
| extend protocol = tostring(msg_a[0]), srcIp = tostring(srcAddr_a[0]), srcPort = tostring(srcAddr_a[1]), destIp = tostring(destAddr_a[0]), destPort = tostring(destAddr_a[1]), action = tostring(msg_a[7])
| where destIp == "10.240.48.136" or destIp == "10.240.48.134" | where destPort == 22 or destPort == 2200

*********************************************************************************************
12. Excessive Windows logon failures:
To find logon attempt ovserved from which account

SecurityEvent
|where Computer contains "AZ-MMT-WEU-RAQ1"
|where Account contains "guest"
| where EventID == "4625"
|project SubjectAccount,TargetAccount,SubjectUserName, TargetUserName, Account,AccountType,Workstation,EventID,TargetDomainName,SubStatus

**********************************************************************************************

13. Security Principal Reconnaissance (LDAP):
To find security groups list

set query_take_max_records=30001;set truncationmaxsize=67108864;
let GetAlertRelatedEntities = (v_SecurityAlert_SystemAlertId: string) {
    SecurityAlert
    | where SystemAlertId == v_SecurityAlert_SystemAlertId
    | project entities = todynamic(Entities)
    | mv-expand entities
    | project-rename entity=entities
};
GetAlertRelatedEntities(@'42f49315-8b47-10bf-4e4e-807a1f902e27')
| parse ['entity'] with * "yName\":\"" SecurityGroup "\",\"Type" *
| project SecurityGroup

*********************************************************************************************
14. Multiple Password Reset by user:
To check the user activities-

AuditLogs
| where TargetResources contains "olivia.landstrom@molnlycke.com"

********************************************************************************************
15. To know how many VMs are integrated in our scope/environment:

Go to Security Center and run below query

Resources
| where type =~ 'microsoft.compute/virtualmachines'
| project vmId = tolower(tostring(id)), vmName = name
| join (Resources
| where type =~ 'microsoft.network/networkinterfaces'
| mv-expand ipconfig=properties.ipConfigurations
| project vmId = tolower(tostring(properties.virtualMachine.id)), privateIp = ipconfig.properties.privateIPAddress, publicIpId = tostring(ipconfig.properties.publicIPAddress.id)
| join kind=leftouter (Resources
| where type =~ 'microsoft.network/publicipaddresses'
| project publicIpId = id, publicIp = properties.ipAddress
) on publicIpId
| project-away publicIpId, publicIpId1
| summarize privateIps = make_list(privateIp), publicIps = make_list(publicIp) by vmId
) on vmId
| project-away vmId1
| sort by vmName asc

16. Analysis query for Malformed User Agent:

AzureDiagnostics
| where TimeGenerated >= ago(24h)
| where ResourceType =~ "APPLICATIONGATEWAYS" 
| where OperationName =~ "ApplicationGatewayAccess" 
| extend ClientIP = column_ifexists("clientIP_s", "None"), UserAgent = columnifexists("userAgent_s", "None")
//| where UserAgent != '-'
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by UserAgent, SourceIP = ClientIP,  requestUri_s, httpMethod_s, host_s, requestQuery_s, Type, httpStatusCode_d, httpStatus_d
| where SourceIP == "45.56.108.12"

***************************************************************************************************

17. Unfamilier signin alert floods:

SecurityAlert
| where TimeGenerated >= ago(1h)
| where AlertName has "Unfamiliar sign-in properties"
| parse Entities with * "\"Name\":" UserName "UP" *
| parse UserName with * "\"" Username_ "\""
| extend User = strcat(Type,"",Username_)
| parse User with * "Alert" User_Name "\"" *
| extend _UserName = strcat(User_Name,"","@molnlycke.com")
| summarize by AlertName, _UserName, Entities
| join kind=inner (BehaviorAnalytics
| summarize by UserPrincipalName, tostring(ActivityInsights), SourceIPAddress) on $left._UserName == $right.UserPrincipalName

**************************************************************************************************

18. Query to to know total entries in particular Table:

Syslog
| where TimeGenerated >= (1d)
| count 

****************************************************************************************************
19. Query to know billable or not:

union *
| summarize totalcount=count() by Type, billable= _IsBillable
| sort by totalcount

*****************************************************************************************************
20. Query to know billable or not along with datasize:

union *
| project Type, billable = _IsBillable, Datasize = _BilledSize
| summarize totalenteries=count(), sum(Datasize) by Type, billable
| sort by sum_Datasize

******************************************************************************************************
21. WhoChangedTheirAADPassword:
AuditLogs
| where OperationName contains "self-service"
| where Result == "success"
| extend userPrincipalName_ = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)
| project userPrincipalName_

*****************************************************************************************************
22. SecurityChangePasswordResets:
// Security Change or Reset Passwords Attempts 
// Counts change/reset paswords attempts per target account. 
SecurityEvent
| where EventID in (4723, 4724)
| summarize count() by TargetAccount

*************************************************************************************************


